{"version":3,"sources":["constants.js","theme.js","components/dialog/BondSetup.jsx","components/dialog/BondUpdate.jsx","components/dialog/DepositRewards.jsx","components/BondCard.jsx","components/dialog/Deposit.jsx","components/dialog/EmergencyWithdraw.jsx","components/dialog/Withdraw.jsx","components/UserCard.jsx","components/Main.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["TRANSACTION_PREFIX","theme","createTheme","palette","primary","teal","secondary","orange","background","default","components","MuiPaper","styleOverrides","root","boxShadow","MuiCard","borderRadius","BondSetup","open","setOpen","contract","useContext","ContractContext","setMessage","AppContext","useState","loading","setLoading","isActive","setIsActive","interestOneMonth","setInterestOneMonth","interestThreeMonth","setInterestThreeMonth","interestSixMonth","setInterestSixMonth","interestTwelveMonth","setInterestTwelveMonth","minimumDeposit","setMinimumDeposit","handleClose","handleSubmit","a","setupBond","gasLimit","transaction","wait","type","content","Link","href","hash","target","rel","Dialog","onClose","LinearProgress","DialogTitle","DialogContent","FormControlLabel","control","Switch","checked","onChange","event","label","TextField","sx","my","fullWidth","variant","value","DialogActions","Button","onClick","BondUpdate","updateBond","DepositRewards","amount","setAmount","depositRewards","BondCard","bondInfo","bondSetupDialogOpen","setBondSetupDialogOpen","bondUpdateDialogOpen","setBondUpdateDialogOpen","depositRewardsDialogOpen","setDepositRewardsDialogOpen","Card","CardHeader","title","subheader","toNumber","action","Chip","color","CardContent","Typography","CardActions","Box","flex","size","CircularProgress","Deposit","timeInMonths","setTimeInMonths","deposit","EmergencyWithdraw","emergencyWithdraw","Withdraw","withdraw","UserCard","period","seconds","userInfo","depositDialogOpen","setDepositDialogOpen","withdrawDialogOpen","setWithdrawDialogOpen","emergencyWithdrawDialogOpen","setEmergencyWithdrawDialogOpen","amountDeposited","depositedOn","Date","toLocaleString","lockPeriod","Main","message","currentAccount","setCurrentAccount","setBondInfo","setUserInfo","connectWallet","window","ethereum","request","method","accounts","console","log","useEffect","length","account","initializeWallet","getBondInfo","getUserInfo","Container","maxWidth","mt","Alert","severity","createContext","getContract","signer","ethers","providers","Web3Provider","getSigner","Contract","abi","App","loaded","setLoaded","error","setError","checkWallet","ThemeProvider","CssBaseline","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.511fddb2.chunk.js","sourcesContent":["export const TRANSACTION_PREFIX = \"https://kovan.etherscan.io/tx/\";\n\nexport const BOND_CONTRACT_ADDRESS =\n  \"0xF753E11Ef6b4DAdEFDD1fd442089Cd5e71dEC7Ca\";\nexport const TOKEN_CONTRACT_ADDRESS =\n  \"0x02A316bBf3A4E92e26E42b6C6fC8b7b33aA33965\";\n\n/*\nexport const BOND_CONTRACT_ADDRESS =\n  \"0xBc2CD02339ce6d75D7805D9e803D95b7f52a6e67\";\nexport const TOKEN_CONTRACT_ADDRESS =\n  \"0xF6128A92bC60e4244831ad323FAA10E87aACf7d3\";\n*/\n","import { orange, teal } from \"@mui/material/colors\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  palette: {\n    primary: teal,\n    secondary: orange,\n    background: {\n      default: \"#F0F2F5\",\n    },\n  },\n  components: {\n    MuiPaper: {\n      styleOverrides: {\n        root: {\n          boxShadow: \"0 1px 2px rgba(0, 0, 0, 0.2)\",\n        },\n      },\n    },\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          borderRadius: \"8px\",\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import { Switch } from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction BondSetup({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n  const [interestOneMonth, setInterestOneMonth] = useState(\"\");\n  const [interestThreeMonth, setInterestThreeMonth] = useState(\"\");\n  const [interestSixMonth, setInterestSixMonth] = useState(\"\");\n  const [interestTwelveMonth, setInterestTwelveMonth] = useState(\"\");\n  const [minimumDeposit, setMinimumDeposit] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.setupBond(\n      isActive,\n      interestOneMonth,\n      interestThreeMonth,\n      interestSixMonth,\n      interestTwelveMonth,\n      minimumDeposit,\n      {\n        gasLimit: 300000,\n      }\n    );\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Setup Bond</DialogTitle>\n      <DialogContent>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={isActive}\n              onChange={(event) => setIsActive(event.target.checked)}\n            />\n          }\n          label={isActive ? \"Active\" : \"Inactive\"}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Interest One Month\"\n          type=\"number\"\n          variant=\"standard\"\n          value={interestOneMonth}\n          onChange={(event) => setInterestOneMonth(event.target.value)}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Interest Three Month\"\n          type=\"number\"\n          variant=\"standard\"\n          value={interestThreeMonth}\n          onChange={(event) => setInterestThreeMonth(event.target.value)}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Interest Six Month\"\n          type=\"number\"\n          variant=\"standard\"\n          value={interestSixMonth}\n          onChange={(event) => setInterestSixMonth(event.target.value)}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Interest Twelve Month\"\n          type=\"number\"\n          variant=\"standard\"\n          value={interestTwelveMonth}\n          onChange={(event) => setInterestTwelveMonth(event.target.value)}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Minimum Deposit\"\n          type=\"number\"\n          variant=\"standard\"\n          value={minimumDeposit}\n          onChange={(event) => setMinimumDeposit(event.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Set up</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default BondSetup;\n","import { Switch } from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction BondUpdate({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n  const [isActive, setIsActive] = useState(true);\n  const [minimumDeposit, setMinimumDeposit] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.updateBond(isActive, minimumDeposit, {\n      gasLimit: 300000,\n    });\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Update Bond</DialogTitle>\n      <DialogContent>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={isActive}\n              onChange={(event) => setIsActive(event.target.checked)}\n            />\n          }\n          label={isActive ? \"Active\" : \"Inactive\"}\n        />\n        <TextField\n          sx={{ my: 1 }}\n          fullWidth\n          label=\"Minimum Deposit\"\n          type=\"number\"\n          variant=\"standard\"\n          value={minimumDeposit}\n          onChange={(event) => setMinimumDeposit(event.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Update</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default BondUpdate;\n","import Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction DepositRewards({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [amount, setAmount] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.depositRewards(amount, {\n      gasLimit: 300000,\n    });\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Deposit Rewards</DialogTitle>\n      <DialogContent>\n        <TextField\n          sx={{ my: 2 }}\n          fullWidth\n          label=\"Amount\"\n          type=\"number\"\n          variant=\"standard\"\n          value={amount}\n          onChange={(event) => setAmount(event.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Deposit</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default DepositRewards;\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Chip from \"@mui/material/Chip\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\nimport BondSetupDialog from \"./dialog/BondSetup\";\nimport BondUpdateDialog from \"./dialog/BondUpdate\";\nimport DepositRewardsDialog from \"./dialog/DepositRewards\";\n\nfunction BondCard({ bondInfo }) {\n  const [bondSetupDialogOpen, setBondSetupDialogOpen] = useState(false);\n  const [bondUpdateDialogOpen, setBondUpdateDialogOpen] = useState(false);\n  const [depositRewardsDialogOpen, setDepositRewardsDialogOpen] =\n    useState(false);\n  if (!bondInfo) return <CircularProgress />;\n\n  return (\n    <Card sx={{ my: 2 }}>\n      <CardHeader\n        title=\"Bond\"\n        subheader={`Minimum Deposit: ${bondInfo.minimumDeposit.toNumber()}`}\n        action={\n          bondInfo.isActive ? (\n            <Chip label=\"Active\" variant=\"outlined\" color=\"success\" />\n          ) : (\n            <Chip label=\"Inactive\" variant=\"outlined\" />\n          )\n        }\n      />\n      <CardContent>\n        <Typography>\n          1 Month Interest: {bondInfo.interestOneMonth.toNumber()}\n        </Typography>\n        <Typography>\n          3 Month Interest: {bondInfo.interestThreeMonth.toNumber()}\n        </Typography>\n        <Typography>\n          6 Month Interest: {bondInfo.interestSixMonth.toNumber()}\n        </Typography>\n        <Typography>\n          12 Month Interest: {bondInfo.interestTwelveMonth.toNumber()}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Box sx={{ flex: 1 }}>\n          <Button\n            size=\"small\"\n            color=\"warning\"\n            onClick={() => setDepositRewardsDialogOpen(true)}\n          >\n            Deposit Rewards\n          </Button>\n        </Box>\n        <Button size=\"small\" onClick={() => setBondUpdateDialogOpen(true)}>\n          Update\n        </Button>\n        <Button size=\"small\" onClick={() => setBondSetupDialogOpen(true)}>\n          Setup\n        </Button>\n      </CardActions>\n      <BondSetupDialog\n        open={bondSetupDialogOpen}\n        setOpen={setBondSetupDialogOpen}\n      />\n      <BondUpdateDialog\n        open={bondUpdateDialogOpen}\n        setOpen={setBondUpdateDialogOpen}\n      />\n      <DepositRewardsDialog\n        open={depositRewardsDialogOpen}\n        setOpen={setDepositRewardsDialogOpen}\n      />\n    </Card>\n  );\n}\n\nexport default BondCard;\n","import Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport TextField from \"@mui/material/TextField\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction Deposit({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [amount, setAmount] = useState(\"\");\n  const [timeInMonths, setTimeInMonths] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.deposit(amount, timeInMonths, {\n      gasLimit: 300000,\n    });\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Deposit</DialogTitle>\n      <DialogContent>\n        <TextField\n          sx={{ my: 2 }}\n          fullWidth\n          label=\"Amount\"\n          type=\"number\"\n          variant=\"standard\"\n          value={amount}\n          onChange={(event) => setAmount(event.target.value)}\n        />\n        <TextField\n          sx={{ my: 2 }}\n          fullWidth\n          label=\"Time in months\"\n          type=\"number\"\n          variant=\"standard\"\n          value={timeInMonths}\n          onChange={(event) => setTimeInMonths(event.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Deposit</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Deposit;\n","import Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction EmergencyWithdraw({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.emergencyWithdraw({\n      gasLimit: 300000,\n    });\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Emergency Withdraw</DialogTitle>\n      <DialogContent>\n        Are you sure to withdraw your fund in emergency?\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Withdraw</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default EmergencyWithdraw;\n","import Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport Link from \"@mui/material/Link\";\nimport { useContext, useState } from \"react\";\nimport { TRANSACTION_PREFIX } from \"../../constants\";\nimport { AppContext, ContractContext } from \"../App\";\n\nfunction Withdraw({ open, setOpen }) {\n  const contract = useContext(ContractContext);\n  const { setMessage } = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setMessage({});\n    const transaction = await contract.withdraw({\n      gasLimit: 300000,\n    });\n    try {\n      await transaction.wait();\n      setMessage({\n        type: \"success\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Succeeded\n          </Link>\n        ),\n      });\n    } catch (error) {\n      setMessage({\n        type: \"error\",\n        content: (\n          <Link\n            href={`${TRANSACTION_PREFIX}${transaction.hash}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Transaction Failed\n          </Link>\n        ),\n      });\n    } finally {\n      setLoading(false);\n      handleClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      {loading && <LinearProgress />}\n      <DialogTitle>Withdraw</DialogTitle>\n      <DialogContent>Are you sure to withdraw your fund?</DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleSubmit}>Withdraw</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default Withdraw;\n","import Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\nimport DepositDialog from \"./dialog/Deposit\";\nimport EmergencyWithdrawDialog from \"./dialog/EmergencyWithdraw\";\nimport WithdrawDialog from \"./dialog/Withdraw\";\n\nfunction getDisplayTime(seconds) {\n  if (!seconds) return \"N/A\";\n  const time = new Date(seconds * 1000);\n  return time.toLocaleString();\n}\n\nfunction getLockPeriod(period) {\n  if (!period) return \"N/A\";\n  return `${period} month`;\n}\n\nfunction UserCard({ userInfo }) {\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [withdrawDialogOpen, setWithdrawDialogOpen] = useState(false);\n  const [emergencyWithdrawDialogOpen, setEmergencyWithdrawDialogOpen] =\n    useState(false);\n\n  if (!userInfo) return <CircularProgress />;\n\n  return (\n    <Card sx={{ my: 2 }}>\n      <CardHeader title=\"User\" />\n      <CardContent>\n        <Typography>\n          Amount Deposited: {userInfo.amountDeposited.toNumber()}\n        </Typography>\n        <Typography>\n          Deposited On: {getDisplayTime(userInfo.depositedOn.toNumber())}\n        </Typography>\n        <Typography>\n          Lock Period: {getLockPeriod(userInfo.lockPeriod.toNumber())}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Box sx={{ flex: 1 }}>\n          <Button\n            size=\"small\"\n            color=\"warning\"\n            onClick={() => setEmergencyWithdrawDialogOpen(true)}\n          >\n            Emergency Withdraw\n          </Button>\n        </Box>\n        <Button size=\"small\" onClick={() => setWithdrawDialogOpen(true)}>\n          Withdraw\n        </Button>\n        <Button size=\"small\" onClick={() => setDepositDialogOpen(true)}>\n          Deposit\n        </Button>\n      </CardActions>\n      <DepositDialog open={depositDialogOpen} setOpen={setDepositDialogOpen} />\n      <WithdrawDialog\n        open={withdrawDialogOpen}\n        setOpen={setWithdrawDialogOpen}\n      />\n      <EmergencyWithdrawDialog\n        open={emergencyWithdrawDialogOpen}\n        setOpen={setEmergencyWithdrawDialogOpen}\n      />\n    </Card>\n  );\n}\n\nexport default UserCard;\n","import Alert from \"@mui/material/Alert\";\nimport Button from \"@mui/material/Button\";\nimport Chip from \"@mui/material/Chip\";\nimport Container from \"@mui/material/Container\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { AppContext, ContractContext } from \"./App\";\nimport BondCard from \"./BondCard\";\nimport UserCard from \"./UserCard\";\n\nfunction Main() {\n  const contract = useContext(ContractContext);\n  const { message, setMessage } = useContext(AppContext);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [bondInfo, setBondInfo] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n\n  const connectWallet = async () => {\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setMessage({});\n    } catch (error) {\n      setMessage({ type: \"error\", content: error.message });\n    }\n  };\n\n  useEffect(() => {\n    const initializeWallet = async () => {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        }\n      } catch (error) {\n        setMessage({ type: \"error\", content: error.message });\n      }\n    };\n\n    initializeWallet();\n  }, [setMessage]);\n\n  useEffect(() => {\n    const getBondInfo = async () => {\n      try {\n        const bondInfo = await contract.bondInfo();\n        setBondInfo(bondInfo);\n      } catch (error) {\n        setMessage({ type: \"error\", content: error.message });\n      }\n    };\n\n    const getUserInfo = async () => {\n      try {\n        const userInfo = await contract.userInfo(currentAccount);\n        setUserInfo(userInfo);\n      } catch (error) {\n        setMessage({ type: \"error\", content: error.message });\n      }\n    };\n\n    if (currentAccount) {\n      getBondInfo();\n      getUserInfo();\n    }\n  }, [currentAccount, contract, setMessage]);\n\n  return (\n    <Container maxWidth=\"sm\" sx={{ mt: 1 }}>\n      {currentAccount && <Chip label={`Connected: ${currentAccount}`} />}\n      {message.content && (\n        <Alert severity={message.type} sx={{ mt: 2 }}>\n          {message.content}\n        </Alert>\n      )}\n      {!currentAccount && (\n        <Button variant=\"outlined\" onClick={connectWallet}>\n          Connect Wallet\n        </Button>\n      )}\n      {currentAccount && <BondCard bondInfo={bondInfo} />}\n      {currentAccount && <UserCard userInfo={userInfo} />}\n    </Container>\n  );\n}\n\nexport default Main;\n","import { ThemeProvider } from \"@mui/material\";\nimport Alert from \"@mui/material/Alert\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { ethers } from \"ethers\";\nimport { createContext, useEffect, useState } from \"react\";\nimport abi from \"../abi/FixedBond.json\";\nimport { BOND_CONTRACT_ADDRESS } from \"../constants\";\nimport theme from \"../theme\";\nimport Main from \"./Main\";\n\nexport const ContractContext = createContext();\n\nexport const AppContext = createContext({\n  message: {},\n  setMessage: () => {},\n});\n\nfunction getContract() {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(BOND_CONTRACT_ADDRESS, abi.abi, signer);\n  return contract;\n}\n\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState({});\n\n  useEffect(() => {\n    async function checkWallet() {\n      const { ethereum } = window;\n      if (!ethereum) {\n        setError(\"Make sure you have Metamask installed!\");\n      } else {\n        const chainId = await ethereum.request({ method: \"eth_chainId\" });\n        if (chainId !== \"0x2a\") {\n          setError(\"Make sure you are on Kovan network!\");\n        }\n      }\n      setLoaded(true);\n    }\n    checkWallet();\n  }, []);\n\n  if (!loaded) return <LinearProgress />;\n\n  if (error)\n    return (\n      <Container maxWidth=\"sm\">\n        <Alert severity=\"warning\">{error}</Alert>\n      </Container>\n    );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ContractContext.Provider value={getContract()}>\n        <AppContext.Provider value={{ message, setMessage }}>\n          <Main />\n        </AppContext.Provider>\n      </ContractContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}